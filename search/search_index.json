{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>You can write code in a file index.md in MkDocs by using the fenced code block syntax. The fenced code block syntax starts with three or more backticks () and ends with the same number of backticks. For example, the following code would write a Python code block in a fileindex.md`:</p> <p>Python def factorial(n):   \"\"\"   Calculate the factorial of a number.</p> <p>Args:     n: The number to calculate the factorial of.</p> <p>Returns:     The factorial of the number.   \"\"\"   if n == 0:     return 1   else:     return n * factorial(n - 1)</p> <p>Use code with caution. Learn more The fenced code block syntax can be used to write code in any programming language. You can also specify the language of the code block by adding a language identifier after the first set of backticks. For example, the following code would write a Python code block in a file index.md and specify that the language of the code block is Python:</p> <pre><code>def factorial(n):\n  \"\"\"\n  Calculate the factorial of a number.\n\n  Args:\n    n: The number to calculate the factorial of.\n\n  Returns:\n    The factorial of the number.\n  \"\"\"\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1) \n</code></pre>"},{"location":"Deployment/","title":"Bienvenue dans notre documentation pour le d\u00e9ploiement","text":""},{"location":"Deployment/#fonctionnalites-du-projet","title":"Fonctionnalit\u00e9s du Projet","text":"<p>La partie de d\u00e9ploiement de notre projet est une \u00e9tape cruciale pour r\u00e9aliser des pr\u00e9dictions sur des objets 3D au format .vtp ou .obj et les visualiser dans notre site web. Cette phase est le pivot central de notre syst\u00e8me, permettant aux utilisateurs de tirer pleinement parti de la technologie 3D pour une exp\u00e9rience enrichissante.</p> <p>Notre objectif principal est d'offrir aux utilisateurs la capacit\u00e9 de t\u00e9l\u00e9charger des fichiers 3D, de les soumettre \u00e0 un processus de pr\u00e9diction, puis de visualiser les r\u00e9sultats de mani\u00e8re interactive sur notre site web. Pour atteindre cet objectif, nous avons mis en place une architecture en deux parties : le backend et le frontend.</p> <p>La partie backend : assure le traitement des donn\u00e9es, y compris la pr\u00e9diction \u00e0 l'aide du mod\u00e8le MeshSegNet.</p> <p>la partie frontend :offre une interface conviviale pour les utilisateurs</p>"},{"location":"Deployment/#technologies-utilisees","title":"Technologies Utilis\u00e9es","text":""},{"location":"Deployment/#configuration-et-installation","title":"Configuration et Installation","text":""},{"location":"Deployment/#1-configuration-de-lenvironnement-virtuel","title":"1. Configuration de l'environnement virtuel","text":"<p>Un environnement virtuel est un environnement Python isol\u00e9 qui permet de g\u00e9rer les d\u00e9pendances sp\u00e9cifiques \u00e0 un projet sans interf\u00e9rer avec d'autres projets Python sur le m\u00eame syst\u00e8me. Voici comment cr\u00e9er et configurer un environnement virtuel pour votre projet:</p>"},{"location":"Deployment/#-installation-de-loutil-virtualenv","title":"-Installation de l'outil  <code>virtualenv</code>:","text":"<p>Si vous n'avez pas d\u00e9j\u00e0 virtualenv install\u00e9 sur votre syst\u00e8me, vous pouvez l'installer en utilisant pip, qui est l'outil de gestion de paquets Python. Ouvrez un terminal et ex\u00e9cutez la commande suivante : <code>pip install virtualenv</code></p>"},{"location":"Deployment/#-creation-de-lenvironnement-virtuel","title":"-Cr\u00e9ation de l'environnement virtuel:","text":"<p>Dans le r\u00e9pertoire racine de votre projet, cr\u00e9ez un environnement virtuel en utilisant virtualenv. Remplacez nom_env par le nom que vous souhaitez donner \u00e0 votre environnement virtuel : virtualenv nom_env. Cela cr\u00e9era un dossier avec le nom de votre environnement virtuel contenant une installation Python propre et isol\u00e9e</p>"},{"location":"Deployment/#-activation-de-lenvironnement-virtuel","title":"-Activation de l'environnement virtuel:","text":"<p>Apr\u00e8s avoir cr\u00e9\u00e9 l'environnement virtuel, vous devez l'activer. Selon votre syst\u00e8me d'exploitation, la commande d'activation varie. Sur Windows: <code>nom_env\\Scripts\\activate.</code> Sur macOS ou Linux: <code>source nom_env/bin/activate</code></p>"},{"location":"Deployment/#2-installation-backend","title":"2. Installation Backend","text":""},{"location":"Deployment/#-installation-de-flask","title":"-Installation de Flask:","text":"<p>Dans l'environnement virtuel activ\u00e9 avant, utiliser lacommande suivante pour installer flask: <code>pip install flask</code></p>"},{"location":"Deployment/#-installation-des-dependances-python","title":"-Installation des d\u00e9pendances Python:","text":"<p>Utilisez pip pour installer les packages Python n\u00e9cessaires. Dans ce contexte, vous aurez probablement besoin de packages tels que Flask, NumPy, Torch, vedo, Pandas, Spicy... Exemple: <code>pip install flask numpy torch</code>.</p> <p>Pour lancer le serveur Backend, il faut acc\u00e9der au dossier de backend, et puis ex\u00e9cuter la commande <code>python app.py</code></p>"},{"location":"Deployment/#3-installation-frontend","title":"3. Installation Frontend","text":""},{"location":"Deployment/#-installation-de-nodejs-et-npm","title":"- Installation de Node.js et npm","text":"<p>Premi\u00e8rement, il faut t\u00e9l\u00e9charger le fichier Windows Installer(.msi) ou macOS Installer(.pkg), puis terminer le processus d' installation et la lancer.</p> <p>Pour lancer le serveur Frontend, il faut acc\u00e9der au dossier de fronted et ex\u00e9cuter la commande <code>npm start</code>.</p>"},{"location":"Deployment/#frontend","title":"Frontend","text":"<p>Cette partie est consacr\u00e9 pour entammer la partie Fontend de notre projet pour aider mieux \u00e0 sa comprehension</p>"},{"location":"Deployment/#1structure-du-frontend","title":"1.Structure du Frontend","text":"<p>l'arbrorescente du Frontend est la suivante:</p> <p></p>"},{"location":"Deployment/#vue-densemble","title":"Vue d'ensemble","text":"<p>-node modules:    Ce r\u00e9pertoire contient toutes les d\u00e9pendances externes install\u00e9es pour le projet \u00e0 l'aide de npm ou yarn.        <code>npm install</code></p> <p>-public:  Ce r\u00e9pertoire contient les fichiers statiques et publics du projet, tels que les fichiers HTML de base.</p> <p>-src:  C'est le r\u00e9pertoire principal du projet contenant le code source.</p> <p>assets: Ce r\u00e9pertoire contient des fichiers statiques utilis\u00e9s dans l'application, tels que les polices (font) et les images (img).</p> <p>components: Ce r\u00e9pertoire contient des composants React r\u00e9utilisables utilis\u00e9s pour construire l'interface utilisateur de l'application.</p> <p>About.js: Un composant qui affiche des informations sur l'application ou l'\u00e9quipe derri\u00e8re le projet.</p> <p>Banner.js: Un composant qui affiche  un texte  et une image anim\u00e9. </p> <p>Card.js: Un composant qui repr\u00e9sente une carte ou un \u00e9l\u00e9ment de contenu pouvant \u00eatre utilis\u00e9 pour afficher des informations.</p> <p>Contact.js: Un composant qui affiche un formulaire pour contacter l'\u00e9quipe de d\u00e9veloppement.</p> <p>Footer.js : Un composant qui repr\u00e9sente le pied de page de l'application, g\u00e9n\u00e9ralement avec des liens et des informations de copyright.</p> <p>NavBar.js: Un composant qui repr\u00e9sente la barre de navigation de l'application, g\u00e9n\u00e9ralement avec des liens vers les diff\u00e9rentes sections du site.</p> <p>Prediction.js: Un composant qui permet \u00e0 l'utilisateur de t\u00e9l\u00e9charger un fichier, de le t\u00e9l\u00e9verser vers un serveur, d'obtenir une pr\u00e9diction, de t\u00e9l\u00e9charger le r\u00e9sultat et d'afficher le r\u00e9sultat avec le composant Vis.</p> <p>Qui utilise le Hooks <code>UseState</code> pour g\u00e9rer plusieurs \u00e9tats, tels que selectedFile, predictionSuccess, predictionMessage, etc. Ces \u00e9tats sont utilis\u00e9s pour suivre et mettre \u00e0 jour l'\u00e9tat de la pr\u00e9diction.             Dans ce composant il existe 3 fonctions fondamentales :</p> <pre><code>           1- `HandleFileChange`: appel\u00e9 lorsque l'utilisateur s\u00e9lectionne le fichier a segment\u00e9 et elle met \u00e0 jour l'\u00e9tat `selectedFile` avec le fichier s\u00e9lectionn\u00e9.\n\n           2- `HandleUpload `:est appel\u00e9e lorsque l'utilisateur clique sur le bouton \"Predict\". Elle envoie le fichier t\u00e9l\u00e9charg\u00e9 vers un serveur distant \u00e0 l'aide d'une requ\u00eate HTTP POST en utilisant la biblioth\u00e8que axios\n\n\n            ``` \n              const response = await axios.post('http://127.0.0.1:5000/predict', formData, {\n             responseType: 'blob',\n              });\n          //  En cas de r\u00e9ussite, elle met \u00e0 jour les \u00e9tats predictionSuccess, predictionMessage, et predictionFileURL pour afficher le r\u00e9sultat de la pr\u00e9diction.\n             ```\n\n          3- `handleDownload`: appel\u00e9e lorsque l'utilisateur clique sur le bouton \"Download the VTP file\". Elle permet de t\u00e9l\u00e9charger le fichier r\u00e9sultant de la pr\u00e9diction.\n</code></pre> <p>et en fin la fonction  <code>scrollToVis</code> : Cette fonction fait d\u00e9filer la page vers le composant Vis qui affiche la visualisation r\u00e9sultante \u00e0 l'aide de VTk.js</p> <p>vis.js : Un composant charg\u00e9 pour la visualisation des donn\u00e9es r\u00e9sultantes de la pr\u00e9diction, en utilisant la biblioth\u00e8que vtk.js \u00e0 partir des donn\u00e9es re\u00e7ues.</p> <p>En r\u00e9sum\u00e9, ce composant  offre des fonctionnalit\u00e9s pour personnaliser la visualisation, ajuster les param\u00e8tres de repr\u00e9sentation,  \u00e0 l'aide de divers fonction telle que createViewer , createPipeline , updateRepresentation             ** , updateOpacity ..</p>"},{"location":"Deployment/#2interface-utilisateur","title":"2.Interface Utilisateur","text":""},{"location":"Deployment/#page-daccueil","title":"Page d'Accueil","text":""},{"location":"Deployment/#page-dinformations","title":"Page d'informations","text":""},{"location":"Deployment/#page-de-contact","title":"Page de contact","text":""},{"location":"Deployment/#page-de-segmentation","title":"Page de Segmentation.","text":""},{"location":"Deployment/#backend","title":"Backend","text":""},{"location":"Deployment/#structure-du-backend","title":"Structure du Backend","text":""},{"location":"Deployment/#api-pour-la-prediction","title":"API pour la Pr\u00e9diction","text":""},{"location":"Deployment/#visualisation-3d-avec-vtkjs","title":"Visualisation 3D avec VTK.js","text":""},{"location":"FAQ/","title":"FAQ probl\u00e8mes-solutions","text":""},{"location":"about/","title":"About","text":""},{"location":"about/#meet-our-team","title":"Meet Our Team","text":""},{"location":"about/#john-doe","title":"John Doe","text":"<p>John Doe is a key member of our team. He specializes in web development and has a passion for creating beautiful and functional websites. John has been with our company for five years and has contributed to many successful projects.</p> <p>LinkedIn: John Doe's LinkedIn Profile</p>"}]}